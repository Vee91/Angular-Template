package com.plagiarism.controller;


import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


import jxl.read.biff.BiffException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;


import com.ultimatix.gess.leave.message.ResponseResource;
import com.ultimatix.gess.leave.message.FieldErrorResource;
import com.ultimatix.gess.leave.service.RttService;

import com.ultimatix.gess.leave.util.StringUtility;
import com.utxfrmwk.util.logger.LoggerFactory;
import com.utxfrmwk.util.logger.LoggerInterface;

@Controller
public class RttController {
	
	private static final LoggerInterface LOG = LoggerFactory.getLogger(RttController.class);

	@Autowired
	private RttService rttService;
	
	@RequestMapping(value="/insertDates", method = RequestMethod.POST)

	public @ResponseBody Map<String, Object> insertDates(@RequestBody List<String> date) 

	{
		 String empId =(String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
	     Collections.sort(date, new Comparator<String>() {
	         DateFormat f = new SimpleDateFormat("dd-MMM-yyyy");
	         @Override
	         public int compare(String o1, String o2) {
	        	 try{
	                 return f.parse(o1).compareTo(f.parse(o2));
	        	 }catch (ParseException e) {
					LOG.error("ParseException 1st compare during insertDates of RTTCONTROLLER");
				}
				return 0;
				
	         }
	     });
	     
	     Collections.sort(date, new Comparator<String>() {
	         DateFormat f = new SimpleDateFormat("dd-MMM-yyyy");
	         @Override
	         public int compare(String o1, String o2) {
	        	 try{
	                 return f.parse(o1).compareTo(f.parse(o2));
	        	 }catch (java.text.ParseException e) {
	        		 LOG.error("ParseException 2nd compare during insertDates of RTTCONTROLLER");
				}
				return 0;
				
	         }
	     });
	     
		Map<String, Object> datedetails=rttService.insertDates(date, empId);
		return datedetails;
	
	}
	
	@RequestMapping(value="/getDetails", method = RequestMethod.POST, produces = "application/json")
	public @ResponseBody Map<String, Object> getDetails() 
	{ 
        String rttVal=rttService.getValue();
		List<String> listOfDates = rttService.getDateList(); 
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("value", rttVal);
		dataMap.put("dateListing",	listOfDates);
		return dataMap;
	
	}
	
	
    
	@RequestMapping(value="/exportToExcel",method=RequestMethod.GET)
	public void exportToExcel( HttpServletRequest request, HttpServletResponse response) 
	{ 
		String country=request.getParameter("countryCode");
		try{
			rttService.exportToExcel(country,response);
		}catch(IOException e){
			   throw new IllegalArgumentException("exception ",e);
			   
		}
		LOG.error("RTTController | exportToExcel | action terminated");
	
	}
     

	
    @RequestMapping(value="/submitImpFileForSLEnt", method=RequestMethod.POST)
    public @ResponseBody List<ResponseResource> handleFileUploadForSLEnt(@RequestParam(value="multipartFile", required=false) MultipartFile paramMultipartFile, HttpServletRequest request, HttpServletResponse response) throws BiffException
    {
    	List<ResponseResource> uploadREsp=new ArrayList<ResponseResource>();
    	if(StringUtility.fileExtnCheck(paramMultipartFile.getOriginalFilename())){
    		try{
    			LOG.info("RTTController | handleFileUploadForSLEnt | Uploaded FileName: "+paramMultipartFile.getOriginalFilename());
    			uploadREsp = rttService.getImportFileForSickEnt(paramMultipartFile.getInputStream());
    			return uploadREsp;
    		
    		}catch(Exception e){
			   throw new IllegalArgumentException("exception ",e);
			   
    		}
    	}
    	else{
    		ResponseResource res1= new ResponseResource("");
			res1.setCode("422");
			FieldErrorResource errorRes1 = new FieldErrorResource();
			errorRes1.setCode("422");
			errorRes1.setMessage("Please upload file with .xls or .xlsx extension!!");
			res1.setFieldErrors(errorRes1);
			uploadREsp.add(res1);
			return uploadREsp;
    	}
    }
     

  
}