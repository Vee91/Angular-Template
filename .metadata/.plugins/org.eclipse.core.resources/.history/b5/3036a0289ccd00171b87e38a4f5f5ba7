package com.plagiarism.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.NumberUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ultimatix.gess.leave.dao.CommonDAO;
import com.ultimatix.gess.leave.dto.ApplyLeaveDTO;
import com.ultimatix.gess.leave.dto.EmployeeDTO;
import com.ultimatix.gess.leave.dto.LeaveRequest;
import com.ultimatix.gess.leave.dto.NominationDTO;
import com.ultimatix.gess.leave.dto.SingletonAttribute;
import com.ultimatix.gess.leave.exception.LeaveValidationException;
import com.ultimatix.gess.leave.message.FieldErrorResource;
import com.ultimatix.gess.leave.message.ResponseResource;
import com.ultimatix.gess.leave.util.CollectionUtility;
import com.ultimatix.gess.leave.util.DateUtils;
import com.ultimatix.gess.leave.util.DuplicateBlockUtility;
import com.ultimatix.gess.leave.util.LeaveConstants;
import com.ultimatix.gess.leave.util.LeaveCustomMessage;
import com.ultimatix.gess.leave.util.LeaveSecurityUtility;
import com.ultimatix.gess.leave.util.LeaveUtils;
import com.ultimatix.gess.leave.util.ObjectUtility;
import com.ultimatix.gess.leave.util.ReflectionUtility;
import com.ultimatix.gess.leave.util.ReportUtils;
import com.ultimatix.gess.leave.util.StringUtility;
import com.ultimatix.pfile.util.FileUtils;
import com.ultimatix.pfile.util.HttpResponseUtils;
import com.utxfrmwk.util.logger.LoggerFactory;
import com.utxfrmwk.util.logger.LoggerInterface;

@Controller
public class ReportController {
	
	private static final LoggerInterface LOG = LoggerFactory.getLogger(ReportController.class);
	
	@Autowired
	private LeaveUtils leaveUtils;
	
	@Autowired
	private CommonDAO commonDAO;
	
	@Autowired
	private SingletonAttribute singletonAttribute;
	
	public ReportController() {
	}
	
	@RequestMapping(value={"/lwpReport"}, method={RequestMethod.GET, RequestMethod.POST})
	@ResponseBody
	public ResponseResource lwpReport(HttpServletRequest request, HttpServletResponse response) throws IOException {
		ResponseResource resource = lwpReport(request, response, false);
		return resource;
	}
	
	
	@RequestMapping(value={"/downloadLwpReport"}, method={RequestMethod.GET, RequestMethod.POST})
	@ResponseBody
	public ResponseResource downloadLwpReport(HttpServletRequest request, HttpServletResponse response) throws IOException {
		ResponseResource resource = lwpReport(request, response, true);
		return resource;
	}
	
	
	@RequestMapping(value={"/fetchReport"}, method={RequestMethod.POST, RequestMethod.GET}, produces = {"application/pdf"})
	public void exportToPDF(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String employeeId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		String reportName = null;
		String fileType = request.getParameter("fileType");
		String reportType = request.getParameter("reportType");
		
		if(NumberUtils.isNumber(request.getParameter("reportName"))) {
			reportName = request.getParameter("reportName");
		}
		
		if(!ObjectUtility.isNullSafe(request.getParameter("reportName")) || "null".equalsIgnoreCase(request.getParameter("reportName"))) {
			ResponseResource resource = new ResponseResource("Report Download ERROR");
			resource.setCode("403");
			resource.setMessage("UnAuthroized Access");
			throw new LeaveValidationException("UnAuthroized Access", resource);
		} else {
			if(ObjectUtility.isNullSafe(reportType) && ObjectUtility.isNullSafe(LeaveConstants.REPORT_NAME.get(reportType.toLowerCase()))) {
				File file = ReportUtils.getCustomFilePath(singletonAttribute.getLocation() + reportName+ReportUtils.EXT_PDF);
				LOG.info("ReportController | exportToPDF | FILE_CREATED");
				ServletOutputStream outStream = response.getOutputStream();
				try {
					if(LeaveConstants.EXT_HTML.equalsIgnoreCase(fileType)) {
						ReportUtils.exportToOutputStream(file.getAbsolutePath(), request, response);
					}else if(LeaveConstants.EXT_PDF.equalsIgnoreCase(fileType)){
						HttpResponseUtils.exportToPdf(LeaveConstants.REPORT_NAME.get(reportType.toLowerCase()), response);
						ReportUtils.exportToOutputStream(file.getAbsolutePath(), request, response);
					}
					
				} finally{
						if(outStream!=null) {
							outStream.flush();
							outStream.close();
						}
						if(file!=null && file.exists()) {
							String fileName = file.getName();
							boolean result = FileUtils.deleteFile(file);
							if(result) {
								LOG.info("ReportController | exportToPDF | loginId:"+employeeId+" | fileName:"+fileName+" | deleteFlag:"+result);
							}
						}
					}
					ReflectionUtility.deleteReportFile(singletonAttribute.getLocation(), employeeId);
				} else {
					ResponseResource resource = new ResponseResource("Improper Data ERROR");
					resource.setCode("403");
					resource.setMessage("Improper Data Access");
					throw new LeaveValidationException("UnAuthroized Access", resource);
				}
		}
	}
	
	private ApplyLeaveDTO setApplyLevDTO(String employeeNo, HttpServletRequest request) {
		ApplyLeaveDTO applyLeaveDTO = new ApplyLeaveDTO();
		String levRequestNo = request.getParameter("levRequestNo");
		if(ObjectUtility.isNullSafe(levRequestNo) && LeaveSecurityUtility.isNormalLeave(levRequestNo)) {
			
			LeaveRequest levRequest = commonDAO.fetchSingleLeaveRequestByNo(levRequestNo);
			applyLeaveDTO.setEmployeeNo(levRequest.getEmployeeNo());
			applyLeaveDTO.setAttribute1_Value(levRequest.getAttributeValue1());
			applyLeaveDTO.setReportType(levRequest.getAttributeValue1());
			String c= levRequest.getAttributeValue1();
			c = c.replaceAll("[^a-zA-Z]+", "");
			applyLeaveDTO.setReportType(c);
			applyLeaveDTO.setStartDate(DateUtils.getDateAsString(levRequest.getStartDate(), LeaveConstants.DATE_FORMAT_MMM));
			applyLeaveDTO.setEndDate(DateUtils.getDateAsString(levRequest.getEndDate(), LeaveConstants.DATE_FORMAT_MMM));
			applyLeaveDTO.setLwpJoiningDate(applyLeaveDTO.getEndDate());
			applyLeaveDTO.setAttribute2_Value(levRequest.getAttributeValue2());
		} else {
			applyLeaveDTO.setEmployeeNo(employeeNo);
			String c= request.getParameter("Attribute1_Value");
	        c = c.replaceAll("[^a-zA-Z]+", "");
			applyLeaveDTO.setReportType(c);
			applyLeaveDTO.setStartDate(request.getParameter("startDate"));
			applyLeaveDTO.setEndDate(request.getParameter("endDate"));
			applyLeaveDTO.setLwpJoiningDate(request.getParameter("endDate"));
			applyLeaveDTO.setAttribute2_Value(request.getParameter("Attribute2_Value"));
		}
		return applyLeaveDTO;
	}
	
	private void setValid(ResponseResource resource, HttpServletRequest request, ApplyLeaveDTO dto) throws IOException {
		Properties properties = leaveUtils.getAppProperties().getObject();
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("employeeNo", dto.getEmployeeNo());
		map.put("startDate", dto.getStartDate());
		map.put("endDate", dto.getEndDate());
		map.put("reportType", dto.getReportType());
		
		for(Map.Entry<String, Object> d:map.entrySet()) {
			if(!ObjectUtility.isNullSafe(d.getValue())) {
				setErrorField(properties, resource, d.getKey(),  "lwp.commonCheck.");
			}
		}
	}
	
	private Object[] getDetail(ResponseResource resource, HttpServletRequest request, Integer track, Integer index, EmployeeDTO emp, ApplyLeaveDTO dto) {
		Object obj[] = null;
		switch(track) {
			case 1:
				obj = childboardexam(resource, request, track, index, emp, dto);
				break;
			case 2:
				obj = childcare16(resource, request, track, index, emp, dto);
				break;
			case 3:
				obj = childcare26(resource, request, track, index, emp, dto);
				break;
			case 4:
				obj = education(resource, request, track, index, emp, dto);
				break;
			case 5:
				obj = joiningspouseoninternationalassignment(resource, request, track, index, emp, dto);
				break;
			case 6:
				obj = majorillness(resource, request, track, index, emp, dto);
				break;
			case 7:
				obj = medicalOwnillness(resource, request, track, index, emp, dto);
				break;
			default:
				break;
		}
		if(obj==null) {
			obj = new Object[0];
		}
		return obj;
	}
	
	private Object[] medicalOwnillness(ResponseResource resource, HttpServletRequest request, Integer track, Integer index,	EmployeeDTO emp, ApplyLeaveDTO dto) {
		List<Object> obj = new ArrayList<Object>();
		if(index==1) {
			obj.add(LeaveSecurityUtility.fetchNotificationName(emp, false));
			obj.add(dto.getStartDate());
			obj.add(dto.getEndDate());
		} else if(index==4) {
			obj.add(dto.getLwpJoiningDate());
		}
		return obj.toArray(new Object[obj.size()]);
	}

	private Object[] majorillness(ResponseResource resource, HttpServletRequest request, Integer track, Integer index, EmployeeDTO emp, ApplyLeaveDTO dto) {
		List<Object> obj = new ArrayList<Object>();
		if(index==1) {
			obj.add(LeaveSecurityUtility.fetchNotificationName(emp, false));
			obj.add(dto.getStartDate());
			obj.add(dto.getEndDate());
			obj.add(StringUtility.isNullSetBlank(dto.getAttribute2_Value()));
		} else if(index==4) {
			obj.add(StringUtility.isNullSetBlank(dto.getAttribute2_Value())+"'s");
		} else if(index==5) {
			obj.add(dto.getLwpJoiningDate());
		}
		return obj.toArray(new Object[obj.size()]);
	}

	private Object[] joiningspouseoninternationalassignment(ResponseResource resource, HttpServletRequest request, Integer track, Integer index, EmployeeDTO emp, ApplyLeaveDTO dto) {
		List<Object> obj = new ArrayList<Object>();
		if(index==1) {
			obj.add(LeaveSecurityUtility.fetchNotificationName(emp, false));
			obj.add(dto.getStartDate());
			obj.add(dto.getEndDate());
		} else if(index==5) {
			obj.add(dto.getLwpJoiningDate());
		}
		return obj.toArray(new Object[obj.size()]);
	}

	private Object[] education(ResponseResource resource, HttpServletRequest request, Integer track, Integer index, EmployeeDTO emp, ApplyLeaveDTO dto) {
		List<Object> obj = new ArrayList<Object>();
		if(index==1) {
			obj.add(LeaveSecurityUtility.fetchNotificationName(emp, false));
			obj.add(dto.getStartDate());
			obj.add(dto.getEndDate());
		} else if(index==5) {
			obj.add(dto.getLwpJoiningDate());
		}
		return obj.toArray(new Object[obj.size()]);
	}

	private Object[] childcare26(ResponseResource resource,	HttpServletRequest request, Integer track, Integer index,	EmployeeDTO emp, ApplyLeaveDTO dto) {
		List<Object> obj = new ArrayList<Object>();
		if(index==1) {
			obj.add(LeaveSecurityUtility.fetchNotificationName(emp, false));
			obj.add(dto.getStartDate());
			obj.add(dto.getEndDate());
		} else if(index==3) {
			obj.add(dto.getLwpJoiningDate());
		}
		return obj.toArray(new Object[obj.size()]);
	}

	private Object[] childcare16(ResponseResource resource,	HttpServletRequest request, Integer track, Integer index,	EmployeeDTO emp, ApplyLeaveDTO dto) {
		List<Object> obj = new ArrayList<Object>();
		if(index==1) {
			obj.add(LeaveSecurityUtility.fetchNotificationName(emp, false));
			obj.add(dto.getStartDate());
			obj.add(dto.getEndDate());
		} else if(index==3) {
			obj.add(dto.getLwpJoiningDate());
		}
		return obj.toArray(new Object[obj.size()]);
	}

	private Object[] childboardexam(ResponseResource resource,	HttpServletRequest request, Integer track, Integer index, EmployeeDTO emp, ApplyLeaveDTO dto) {
		List<Object> obj = new ArrayList<Object>();
		if(index==1) {
			obj.add(LeaveSecurityUtility.fetchNotificationName(emp, false));
			obj.add(dto.getStartDate());
			obj.add(dto.getEndDate());
		} else if(index==4) {
			obj.add(dto.getLwpJoiningDate());
		}
		return obj.toArray(new Object[obj.size()]);
	}

	private EmployeeDTO fetchEmployee(String employeeNo) {
		EmployeeDTO dto = null;
		if(ObjectUtility.isNullSafe(employeeNo)) {
			dto = commonDAO.fetchEmployeeDetail(employeeNo);
		}
		return dto;
	}
	
	
	
	@RequestMapping(value={"/maternityForm"}, method={RequestMethod.POST, RequestMethod.GET})
	@ResponseBody
	public ResponseResource maternityForm(HttpServletRequest request, HttpServletResponse response) throws IOException{
		ResponseResource resource = maternityForm(request, response, false);
		return resource;

	}
	
	@RequestMapping(value={"/downloadMaternityForm"}, method={RequestMethod.POST, RequestMethod.GET})
	@ResponseBody
	public ResponseResource maternityFormDownload(HttpServletRequest request, HttpServletResponse response) throws IOException {
		ResponseResource resource = maternityForm(request, response, true);
		return resource;
	}
	
	private ResponseResource lwpReport(HttpServletRequest request, HttpServletResponse response, boolean flag) throws IOException {
		String employeeId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		ApplyLeaveDTO applyLeaveDTO = setApplyLevDTO(employeeId, request);
		String exportName = "";
		String fileType = request.getParameter("fileType");
		String report = LeaveConstants.REPORT_LIST.get(applyLeaveDTO.getReportType());
		ResponseResource resource = new ResponseResource(applyLeaveDTO.getEmployeeNo());
		Properties properties = leaveUtils.getAppProperties().getObject();
		Map<String, Object> map = new HashMap<String, Object>();
		List<Map<String, Object>> lt = new ArrayList<Map<String, Object>>();
		lt.add(map);
		EmployeeDTO dto = fetchEmployee(applyLeaveDTO.getEmployeeNo());
		LOG.info("ReportController | lwpReport | report:"+report+" isDownloadRequest:"+flag);
		setValid(resource, request, applyLeaveDTO);
		if(ObjectUtility.isNullSafe(resource) && CollectionUtility.isNotEmpty(resource.getFieldErrors())) {
			throw new LeaveValidationException("LWP Report Error", resource);
		}else if(ObjectUtility.isNullSafe(report)) {
			Date lwpJoining = DateUtils.getDateFromString(applyLeaveDTO.getEndDate(), LeaveConstants.DATE_FORMAT_MMM);
			lwpJoining = DateUtils.incDate(lwpJoining, 1);
			applyLeaveDTO.setLwpJoiningDate(DateUtils.getDateAsString(lwpJoining, LeaveConstants.DATE_FORMAT_MMM));
			
			String []reportDetail = report.split("_");
			String reportName = reportDetail[0];
			String name = LeaveSecurityUtility.fetchNotificationName(dto, false);
			map.put("title", properties.get(reportName+".title"));
			map.put("name", name);
			map.put("code", applyLeaveDTO.getEmployeeNo());
			String trackReport = (String)properties.get(reportName);
			int track = Integer.valueOf(trackReport);
			for(int i=1; i<=6; i++) {
				String index = new StringBuilder("para_"+i).toString();
				Object []objArg = getDetail(resource, request, track, i, dto, applyLeaveDTO);
				String msg = (String)properties.get(new StringBuilder(reportName+"."+index).toString());
				String message = ObjectUtility.isNullSafe(objArg) && objArg.length>0?LeaveCustomMessage.setCustomMessage(msg, objArg):msg;
				message = ObjectUtility.isNullSafe(message)?message:"";
				map.put(index, message);
			}
			resource.setSuccess(map);
			if(flag) {
				exportName = ReportUtils.jasperStaticExportToPdf("lwp", applyLeaveDTO.getEmployeeNo(), lt, request, response, singletonAttribute, true, fileType);
				resource.setMessage(exportName);
				resource.setSuccess("fileName", exportName);
			}
		}
		resource.setCode("200");
		
		return resource;
	}
	
	private ResponseResource maternityForm(HttpServletRequest request, HttpServletResponse response, boolean flag) throws IOException {
		String employeeId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		Properties properties = leaveUtils.getAppProperties().getObject();
		maternitryCheck(employeeId, request, response);
		String fileType = request.getParameter("fileType");
		
		ResponseResource resource = new ResponseResource("Maternitry-Form");

		Map<String, Object> map = new HashMap<String, Object>();
		List<Map<String, Object>> lt = new ArrayList<Map<String, Object>>();
		lt.add(map);
		String levRequestNo = request.getParameter("levRequestNo");
		String para1 = null, para2= null;
		EmployeeDTO employeeDTO = null;
		if(ObjectUtility.isNullSafe(levRequestNo) && LeaveSecurityUtility.isNormalLeave(levRequestNo)) {
			LeaveRequest leaveRequest = commonDAO.fetchSingleLeaveRequestByNo(levRequestNo);
			NominationDTO nominationDTO = DuplicateBlockUtility.getNominationDetail(commonDAO.getJdbcTemplate(), levRequestNo);
			employeeDTO = commonDAO.fetchEmployeeDetail(leaveRequest.getEmployeeNo());
			
			String startDate = DateUtils.getDateAsString(leaveRequest.getStartDate(), LeaveConstants.DATE_FORMAT_MMM);
			String endDate = DateUtils.getDateAsString(leaveRequest.getEndDate(), LeaveConstants.DATE_FORMAT_MMM);
			employeeDTO.setDeputeBranch(leaveRequest.getAttributeValue3());
			Object []para1Args = new Object[] {
					StringUtility.isNullSetBlank(LeaveSecurityUtility.fetchNotificationName(employeeDTO, false)),
					StringUtility.isNullSetBlank(nominationDTO.getRelation()),
					StringUtility.isNullSetBlank(nominationDTO.getRelativeName()),
					StringUtility.isNullSetBlank(employeeDTO.getEmployeeRole()),
					StringUtility.isNullSetBlank(employeeDTO.getDeputeBranch()),
					leaveRequest.getAttributeValue2(),
					DateUtils.getDateAsString(startDate, LeaveConstants.DATE_FORMAT_MMM, LeaveConstants.REPORT_DATE_PATTERN),//request.getParameter("startDate"),//"Nov 25,2015",
					DateUtils.getDateAsString(endDate, LeaveConstants.DATE_FORMAT_MMM, LeaveConstants.REPORT_DATE_PATTERN)//request.getParameter("endDate")//"Nov 22,2018"
			};
			para1 = LeaveCustomMessage.setCustomMessage((String)properties.get("maternity.pdf.para_1"), para1Args);
			
			Object []para2Args = new Object[] {
					nominationDTO.getNomineeName(),
					nominationDTO.getNomineeAddress()
			};
			para2 = LeaveCustomMessage.setCustomMessage((String)properties.get("maternity.pdf.para_2"), para2Args);
		} else {
			employeeDTO = commonDAO.fetchEmployeeDetail(employeeId);
			EmployeeDTO employee = commonDAO.fetchDeputeAndBaseLocation(employeeDTO.getPersonId());
			if(employee!=null) {
				employeeDTO.setBaseBranch(employee.getBaseBranch());
				employeeDTO.setDeputeBranch(employee.getDeputeBranch());
			}
			Object []para1Args = new Object[] {
					StringUtility.isNullSetBlank(LeaveSecurityUtility.fetchNotificationName(employeeDTO, false)),
					StringUtility.isNullSetBlank(request.getParameter("nomRelation")),
					StringUtility.isNullSetBlank(request.getParameter("fatherName")),
					StringUtility.isNullSetBlank(employeeDTO.getEmployeeRole()),
					StringUtility.isNullSetBlank(employeeDTO.getDeputeBranch()),
					request.getParameter("childBirthDate"),
					DateUtils.getDateAsString(request.getParameter("startDate"), LeaveConstants.DATE_FORMAT_MMM, LeaveConstants.REPORT_DATE_PATTERN),//request.getParameter("startDate"),//"Nov 25,2015",
					DateUtils.getDateAsString(request.getParameter("endDate"), LeaveConstants.DATE_FORMAT_MMM, LeaveConstants.REPORT_DATE_PATTERN)//request.getParameter("endDate")//"Nov 22,2018"
			};
			para1 = LeaveCustomMessage.setCustomMessage((String)properties.get("maternity.pdf.para_1"), para1Args);
			
			
			Object []para2Args = new Object[] {
					request.getParameter("nomName"),//"XYZ ABC",
					request.getParameter("nomAddress")//"TCS Opera House"
			};
			para2 = LeaveCustomMessage.setCustomMessage((String)properties.get("maternity.pdf.para_2"), para2Args);
		}
		map.put("para_1", para1);
		map.put("para_2", para2);
		
		map.put("branch", employeeDTO.getDeputeBranch());
		map.put("location", "");
		String headerImage =request.getRealPath(new StringBuilder(LeaveConstants.REPORT_PATH+"TATA.gif").toString());
		map.put("TataLogo", headerImage);
		
		LOG.info("Report data build sucessfully "+map);
		resource.setSuccess(map);
		if(flag) {
			String exportName = ReportUtils.jasperStaticExportToPdf("maternityApplication", employeeDTO.getEmployeeNo(), lt, request, response, singletonAttribute, true, fileType);
			resource.setMessage(exportName);
			resource.setSuccess("fileName", exportName);
		}
		map.put("TataLogo", "TATA.gif");
		resource.setCode("200");
		
		return resource;
	}
	
	private void maternitryCheck(String employeeNo, HttpServletRequest request, HttpServletResponse response) throws IOException {
		boolean isError = false;
		Properties properties = leaveUtils.getAppProperties().getObject();
		ResponseResource resource = new ResponseResource(employeeNo);
		String []fieldCheck = new String[]{
				"nomName",
				"nomRelation",
				"nomAddress",
				"childBirthDate",
				"startDate",
				"endDate",
				"fatherName",
				"fileType"
		};
		for(String field:fieldCheck) {
			if(!ObjectUtility.isNullSafe(request.getParameter(field))) {
				isError = true;
				setErrorField(properties, resource, field, "maternityCheck");
			}
		}
		
		if(!("Wife".equalsIgnoreCase(request.getParameter("nomRelation")) || "daughter".equalsIgnoreCase(request.getParameter("nomRelation")))) {
			//nothing to do
		}
		
		if(isError) {
			throw new LeaveValidationException("Maternity Form Error", resource);
		}
	}
	
	private void setErrorField(Properties properties, ResponseResource resource, String fieldName, String checkType) {
		FieldErrorResource errorResource = new FieldErrorResource();
		errorResource.setCode("422");
		errorResource.setField(fieldName);
		errorResource.setMessage((String)properties.get(new StringBuilder(checkType+"."+fieldName).toString()));
		resource.setFieldErrors(errorResource);
	}
}
