package com.plagiarism.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.ultimatix.gess.leave.service.CommonService;
import com.ultimatix.gess.leave.service.DataFixService;
import com.ultimatix.gess.leave.util.CollectionUtility;
import com.ultimatix.gess.leave.util.DataFixUtils;
import com.ultimatix.gess.leave.util.ExcelUtils;
import com.ultimatix.gess.leave.util.LeaveConstants;
import com.ultimatix.globalESS.redis.connection.GessAsyncMsgToRedis;
import com.utxfrmwk.util.logger.LoggerFactory;
import com.utxfrmwk.util.logger.LoggerInterface;

@Controller
public class DataFixController {
	
	private static final LoggerInterface LOG = LoggerFactory.getLogger(DataFixController.class);
	
	@Autowired
	private DataFixService dataFixService;
	
	@Autowired
	private CommonService commonService;
	
	@Autowired
	private GessAsyncMsgToRedis redisCall;
	
	@RequestMapping(value={"/fixRedisIssue"}, method={RequestMethod.POST, RequestMethod.GET})
	@ResponseBody
	public Map<String, Map<String, String>> fixRedisIssue(@RequestParam(value="employeeId") String employeeId, @RequestParam(value="redisFlag", required=false) String redisFlag) {
		String loginId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		String []moduleNames = new String[] {LeaveConstants.MODULE_NAME};
		Map<String, Map<String, String>> map = new HashMap<String, Map<String, String>>();
		LOG.info("DataFixController | EmployeeId:"+employeeId+" | loginId:"+loginId+" | Ipaddress:"+DataFixUtils.getIpAddress());
		for(String moduleName:moduleNames) {
			map.put(moduleName, commonService.fixRedisIssue(redisCall, employeeId, moduleName));
		}
		return map;
	}
	
	@RequestMapping(value={"/fetchModuleDFList"}, method={RequestMethod.POST, RequestMethod.GET})
	@ResponseBody
	public Map<Integer, String> fetchModuleDF(@RequestParam(value="module") String moduleName) {
		String loginId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		LOG.info("DataFixController | ModuleName:"+moduleName+" | loginId:"+loginId+" | Ipaddress:"+DataFixUtils.getIpAddress());
		if(commonService.isGHDAccess(loginId)) {
			return DataFixUtils.fetchModuleDF(moduleName);
		} else {
			Map<Integer, String> map = new HashMap<Integer, String>();
			map.put(-1, "Not Authorized");
			return map;
		}
	}
	
	@RequestMapping(value={"/fetchModuleList"}, method={RequestMethod.POST, RequestMethod.GET})
	@ResponseBody
	public List<String> fetchModuleList() {
		String loginId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		if(commonService.isGHDAccess(loginId)) {
			List<String> moduleList = new ArrayList<String>();
			moduleList.add("SELECT");
			List<String> fetch = ExcelUtils.fetchListOfModule();
			if(CollectionUtility.isNotEmpty(fetch)) {
				for(String name:fetch) {
					moduleList.add(name);
				}
			}
			return moduleList;
		} else {
			return new ArrayList<String>();
		}
	}
	
	@RequestMapping(value={"/fixPrmId", "/fixCalId"}, method={RequestMethod.POST, RequestMethod.GET})
	@ResponseBody
	public Map<String, String> fixElcPrmCal(@RequestParam(value="type", required=false) String type, @RequestParam(value="key") String key, @RequestParam(value="updateFlag", required=false, defaultValue="N") String updateFlag) {
		String loginId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		LOG.info("DataFixController | fixElcPrmCal | key:"+key+" | type:"+type+" | updateFlag:"+updateFlag+" | loginId:"+loginId+" | IpAddress:"+DataFixUtils.getIpAddress()+" | START");
		Map<String, String> map = new HashMap<String, String>();
		map.put("PRESENT_REDIS_DATA", DataFixUtils.fetchRedisValueFromKey(key));
		LOG.info("DataFixController | fixElcPrmCal | key:"+key+" | type:"+type+" | updateFlag:"+updateFlag+" | loginId:"+loginId+" | IpAddress:"+DataFixUtils.getIpAddress()+" | END");
		return map;
		
	}
	
	@RequestMapping(value={"/fetchDataFixExcel"}, method={RequestMethod.POST, RequestMethod.GET})
	public void exportDataFixExcel(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String loginId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		String module = request.getParameter("module");
		String type = request.getParameter("dfType");
		LOG.info("DataFixController | exportDataFixExcel | START | loginId:"+loginId +" module:"+module+" DFType:"+type+" | IpAddress:"+DataFixUtils.getIpAddress());
		List<String> moduleList = ExcelUtils.fetchListOfModule();
		if(module!=null && moduleList.contains(module)) {
			DataFixUtils.exportDFExcel(module, type, dataFixService, response);
		} else {
			LOG.info("DataFixController | exportDataFixExcel | Either Module is Null or doesn't Exist loginId:"+loginId +" module:"+module+" DFType:"+type);
		}
		LOG.info("DataFixController | exportDataFixExcel | END | loginId:"+loginId +" module:"+module+" DFType:"+type);
	}
	
	@RequestMapping(value={"/batchExcelUpdate"}, method={RequestMethod.POST})
	@ResponseBody
	public List<String> batchExcelUpdate(@RequestParam(value = "file", required = false) MultipartFile[] files, MultipartHttpServletRequest request, HttpServletResponse response) {
		String loginId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		LOG.info("DataFixController | batchExcelUpdate | START | loginId:"+loginId +" | IpAddress:"+DataFixUtils.getIpAddress());
		List<String> message = new ArrayList<String>();
		if(commonService.isGHDAccess(loginId)) {
			String module = request.getParameter("module");
			message = DataFixUtils.batchExcelFix(module, files, dataFixService, message);
		} else {
			message.add("Not Authorized");
			return message;
		}
		return message;
	}
}
